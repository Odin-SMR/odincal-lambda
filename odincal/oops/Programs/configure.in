#
# configure.in for ODIN software package
#

dnl Process this file with autoconf to produce a configure script.
AC_INIT(bintable.h)

#--------------------------------------------------------------------
# Check "uname" to determine system type
#--------------------------------------------------------------------
AC_PROGRAM_CHECK(uname_found, uname, 1, 0)
if test $uname_found -eq 0 ; then
    echo " No uname found; setting system type to unknown."
    system="unknown"
else
    system=`uname -s`-`uname -r`
fi

dnl Checks for programs.
AC_PROG_CC
AC_PROG_RANLIB
AC_PROG_INSTALL

AC_PATH_PROG(TAR,tar)
AC_PATH_PROG(GZIP,gzip)

dnl Check if system is bigendian
AC_C_BIGENDIAN

dnl Checks for ANSI stdlib.h.
AC_CHECK_HEADERS(stdlib.h string.h math.h limits.h ,ANSI_HEADER=yes,ANSI_HEADER=no)dnl

dnl Check if prototyping is allowed.
AC_TRY_COMPILE( , void d( int , double) , PROTO=yes, PROTO=no)dnl

if test $ANSI_HEADER = no -o $PROTO = no; then
    echo "*********** WARNING: ODIN CONFIGURE FAILURE ************"
    echo " ANSI C environment NOT found. Aborting odin configure."
    if test $ANSI_HEADER = no; then 
        echo " You're missing a needed ANSI header file."
    fi
    if test $PROTO = no; then
        echo " Your compiler can't do ANSI function prototypes."
    fi
    echo " You need an ANSI C compiler and all ANSI trappings"
    echo " to build the software.   "
    echo "*******************************************************  "
    exit 0;
fi

CFLAGS="$CFLAGS"
LIBPRE=""

case $system in
    SunOS-4*)
        ARCH="sun"
        ;;
    HP-UX-*)
        ARCH="hp"
        ;;
    SunOS-5*)
        ARCH="solaris"
        ;;
    IRIX-5.*)
        ARCH="sgi"
        ;;
    ULTRIX*)
        ARCH="dec"
        ;;
    Linux*)
        ARCH="linux"
        ;;
    *)
        ARCH="unknown"
        ;;
esac

case $CC in
    gcc)
        GCCVERSION="`gcc -v 2>&1 | grep \"gcc version \"`"
        echo " Using $GCCVERSION"
        AC_SUBST(GCCVERSION)
        ;;
    *)
        echo "*********** WARNING: ODIN CONFIGURE FAILURE ***********"
        echo " You need the GCC compiler to build the software."
        echo "*******************************************************"
        exit 0;
	;;
esac

AC_SUBST(ARCH)dnl
AC_SUBST(CFLAGS)dnl
AC_SUBST(CC)dnl
AC_SUBST(LIBPRE)dnl

#--------------------------------------------------------------------
#	Check for the existence of the -lsocket and -lnsl libraries.
#	The order here is important, so that they end up in the right
#	order in the command line generated by make.  Here are some
#	special considerations:
#	1. Use "connect" and "accept" to check for -lsocket, and
#	   "gethostbyname" to check for -lnsl.
#	2. Use each function name only once:  can't redo a check because
#	   autoconf caches the results of the last check and won't redo it.
#	3. Use -lnsl and -lsocket only if they supply procedures that
#	   aren't already present in the normal libraries.  This is because
#	   IRIX 5.2 has libraries, but they aren't needed and they're
#	   bogus:  they goof up name resolution if used.
#	4. On some SVR4 systems, can't use -lsocket without -lnsl too.
#	   To get around this problem, check for both libraries together
#	   if -lsocket doesn't work by itself.
#--------------------------------------------------------------------
cfitsio_checkBoth=0
AC_CHECK_HEADERS(fitsio.h)
AC_CHECK_HEADERS(hdf/hdf.h)
AC_CHECK_LIB(cfitsio, ffopen)
AC_CHECK_LIB(df, Hopen)
AC_CHECK_FUNC(connect, cfitsio_checkSocket=0, cfitsio_checkSocket=1)
if test "$cfitsio_checkSocket" = 1; then
    AC_CHECK_LIB(socket, main, LIBS="$LIBS -lsocket", cfitsio_checkBoth=1)
fi
if test "$cfitsio_checkBoth" = 1; then
    tk_oldLibs=$LIBS
    LIBS="$LIBS -lsocket -lnsl"
    AC_CHECK_FUNC(accept, cfitsio_checkNsl=0, [LIBS=$tk_oldLibs])
fi
AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, main, [LIBS="$LIBS -lnsl"]))

AC_DEFINE(HAVE_NET_SERVICES)

# ==================== END OF unix networking SECTION ================

AC_OUTPUT(Makefile)dnl
